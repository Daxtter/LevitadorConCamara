
motorAbanico.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000214  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800100  00800100  00000288  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000865  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000069f  00000000  00000000  00000bb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000049c  00000000  00000000  00001254  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  000016f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000415  00000000  00000000  000017f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001db  00000000  00000000  00001c09  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001de4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a9 30       	cpi	r26, 0x09	; 9
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 98 00 	call	0x130	; 0x130 <main>
  88:	0c 94 08 01 	jmp	0x210	; 0x210 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <UART_init>:
	while(*string != 0)// While the last value is not null
	{
		UART_write(*string);// Send the next character in the string
		string++;// Add one to the string address
	}
}
  90:	e0 ec       	ldi	r30, 0xC0	; 192
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	80 83       	st	Z, r24
  98:	80 81       	ld	r24, Z
  9a:	80 83       	st	Z, r24
  9c:	e1 ec       	ldi	r30, 0xC1	; 193
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 81       	ld	r24, Z
  a2:	88 60       	ori	r24, 0x08	; 8
  a4:	80 83       	st	Z, r24
  a6:	80 81       	ld	r24, Z
  a8:	80 61       	ori	r24, 0x10	; 16
  aa:	80 83       	st	Z, r24
  ac:	80 81       	ld	r24, Z
  ae:	80 83       	st	Z, r24
  b0:	80 81       	ld	r24, Z
  b2:	80 83       	st	Z, r24
  b4:	80 81       	ld	r24, Z
  b6:	80 68       	ori	r24, 0x80	; 128
  b8:	80 83       	st	Z, r24
  ba:	e2 ec       	ldi	r30, 0xC2	; 194
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	80 83       	st	Z, r24
  c2:	80 81       	ld	r24, Z
  c4:	80 83       	st	Z, r24
  c6:	80 81       	ld	r24, Z
  c8:	80 83       	st	Z, r24
  ca:	80 81       	ld	r24, Z
  cc:	86 60       	ori	r24, 0x06	; 6
  ce:	80 83       	st	Z, r24
  d0:	80 81       	ld	r24, Z
  d2:	80 83       	st	Z, r24
  d4:	87 e6       	ldi	r24, 0x67	; 103
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  dc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  e0:	08 95       	ret

000000e2 <UART_read>:
  e2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  e6:	88 23       	and	r24, r24
  e8:	1c f4       	brge	.+6      	; 0xf0 <UART_read+0xe>
  ea:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  ee:	08 95       	ret
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	08 95       	ret

000000f4 <configurePins>:
    }
}

void configurePins()
{
	DDRB |= 1<<PINB1; //B1 Output
  f4:	84 b1       	in	r24, 0x04	; 4
  f6:	82 60       	ori	r24, 0x02	; 2
  f8:	84 b9       	out	0x04, r24	; 4
	TCCR1A |= (1<<COM1A1)|(0<<COM1A0); //Timer1 Config. PWM (Non Inverting)
  fa:	e0 e8       	ldi	r30, 0x80	; 128
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	80 68       	ori	r24, 0x80	; 128
 102:	80 83       	st	Z, r24
	TCCR1A |= (0<<WGM11)|(0<<WGM10); //fast PWM 
 104:	80 81       	ld	r24, Z
 106:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM13)|(0<<WGM12); //TOP=ICR1
 108:	e1 e8       	ldi	r30, 0x81	; 129
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	80 61       	ori	r24, 0x10	; 16
 110:	80 83       	st	Z, r24
	TCCR1B |= (0<<CS12)|(0<<CS11)|(1<<CS10); // CLK NO prescaler
 112:	80 81       	ld	r24, Z
 114:	81 60       	ori	r24, 0x01	; 1
 116:	80 83       	st	Z, r24
	ICR1=0xFFFF;
 118:	8f ef       	ldi	r24, 0xFF	; 255
 11a:	9f ef       	ldi	r25, 0xFF	; 255
 11c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 120:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	OCR1A=0;
 124:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 128:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	sei(); //enable global interrupts
 12c:	78 94       	sei
 12e:	08 95       	ret

00000130 <main>:
uint8_t datoLow,datoHigh;

int main(void)
{
	
	UART_init();
 130:	0e 94 48 00 	call	0x90	; 0x90 <UART_init>
	configurePins();
 134:	0e 94 7a 00 	call	0xf4	; 0xf4 <configurePins>
    /* Replace with your application code */
    while (1) 
    {
		if(rxflag)
 138:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <rxflag>
 13c:	88 23       	and	r24, r24
 13e:	71 f0       	breq	.+28     	; 0x15c <main+0x2c>
		{
			dato = (datoHigh << 8) | datoLow;
 140:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <datoHigh>
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	98 2f       	mov	r25, r24
 148:	88 27       	eor	r24, r24
 14a:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <datoLow>
 14e:	82 2b       	or	r24, r18
 150:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <dato+0x1>
 154:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <dato>
			rxflag = false;
 158:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <rxflag>
		}
		
		if(dato!=datoAnt)
 15c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <dato>
 160:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <dato+0x1>
 164:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 168:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 16c:	82 17       	cp	r24, r18
 16e:	93 07       	cpc	r25, r19
 170:	19 f3       	breq	.-58     	; 0x138 <main+0x8>
		{
			OCR1A=dato;
 172:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 176:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
			datoAnt=dato;
 17a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <dato>
 17e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <dato+0x1>
 182:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 186:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 18a:	d6 cf       	rjmp	.-84     	; 0x138 <main+0x8>

0000018c <__vector_18>:
	OCR1A=0;
	sei(); //enable global interrupts
}

ISR(USART_RX_vect)
{
 18c:	1f 92       	push	r1
 18e:	0f 92       	push	r0
 190:	0f b6       	in	r0, 0x3f	; 63
 192:	0f 92       	push	r0
 194:	11 24       	eor	r1, r1
 196:	2f 93       	push	r18
 198:	3f 93       	push	r19
 19a:	4f 93       	push	r20
 19c:	5f 93       	push	r21
 19e:	6f 93       	push	r22
 1a0:	7f 93       	push	r23
 1a2:	8f 93       	push	r24
 1a4:	9f 93       	push	r25
 1a6:	af 93       	push	r26
 1a8:	bf 93       	push	r27
 1aa:	ef 93       	push	r30
 1ac:	ff 93       	push	r31
	count++;
 1ae:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <count>
 1b2:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <count+0x1>
 1b6:	01 96       	adiw	r24, 0x01	; 1
 1b8:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <count+0x1>
 1bc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <count>
	if(count==1) datoLow=UART_read();
 1c0:	01 97       	sbiw	r24, 0x01	; 1
 1c2:	21 f4       	brne	.+8      	; 0x1cc <__vector_18+0x40>
 1c4:	0e 94 71 00 	call	0xe2	; 0xe2 <UART_read>
 1c8:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <datoLow>
	if(count==2)
 1cc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <count>
 1d0:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <count+0x1>
 1d4:	02 97       	sbiw	r24, 0x02	; 2
 1d6:	59 f4       	brne	.+22     	; 0x1ee <__vector_18+0x62>
	{
		datoHigh=UART_read();
 1d8:	0e 94 71 00 	call	0xe2	; 0xe2 <UART_read>
 1dc:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <datoHigh>
		rxflag=true;
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <rxflag>
		count=0;
 1e6:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <count+0x1>
 1ea:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <count>
	}
 1ee:	ff 91       	pop	r31
 1f0:	ef 91       	pop	r30
 1f2:	bf 91       	pop	r27
 1f4:	af 91       	pop	r26
 1f6:	9f 91       	pop	r25
 1f8:	8f 91       	pop	r24
 1fa:	7f 91       	pop	r23
 1fc:	6f 91       	pop	r22
 1fe:	5f 91       	pop	r21
 200:	4f 91       	pop	r20
 202:	3f 91       	pop	r19
 204:	2f 91       	pop	r18
 206:	0f 90       	pop	r0
 208:	0f be       	out	0x3f, r0	; 63
 20a:	0f 90       	pop	r0
 20c:	1f 90       	pop	r1
 20e:	18 95       	reti

00000210 <_exit>:
 210:	f8 94       	cli

00000212 <__stop_program>:
 212:	ff cf       	rjmp	.-2      	; 0x212 <__stop_program>
